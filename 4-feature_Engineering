{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e0e6f32c",
   "metadata": {
    "id": "9be64e92",
    "papermill": {
     "duration": 0.002855,
     "end_time": "2025-07-18T16:19:39.620222",
     "exception": false,
     "start_time": "2025-07-18T16:19:39.617367",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Titanic Veri Seti ile Özellik Mühendisliği Ödevi\n",
    "\n",
    "\n",
    "- **Veri seti**: Titanic veri seti.\n",
    "- **Amaç**:\n",
    "  - `Sex` sütununu veri setinden düşürmek.\n",
    "  - `Name` sütunundan unvanları (`Title`, örneğin Mr, Mrs, Miss) çıkararak cinsiyet tahmini yapmak.\n",
    "  - Eksik verileri doldurmak ve yeni özellikler oluşturmak.\n",
    "  - Bu aşamaya kadar kullanılan kodların fonksiyonlaştırılması.\n",
    "  - Tüm işlemleri fonksiyonlar halinde düzenlemek.\n",
    "- **Kullanılan kütüphaneler**: `pandas`, `numpy`.\n",
    "\n",
    "\n",
    "## Görevler\n",
    "Aşağıdaki adımları takip ederek özellik mühendisliği yapın. Her bir görev için ayrı bir fonksiyon yazmanız gerekiyor. Fonksiyonlar, modüler ve tekrar kullanılabilir olmalıdır.\n",
    "\n",
    "### 1. Veri Setini Yükleme\n",
    "- **Görev**: Titanic veri setini bir pandas DataFrame’e yükleyin.\n",
    "- **Fonksiyon**: `load_data(file_path)`\n",
    "  - **Parametre**: `file_path` (dosya yolu, örneğin \"train.csv\")\n",
    "  - **Çıktı**: Pandas DataFrame\n",
    "\n",
    "### 2. Eksik Verileri Doldurma\n",
    "- **Görev**: `Age` ve `Embarked` sütunlarındaki eksik verileri doldurun.\n",
    "  - `Age`: Ortalama yaş ile doldurun.\n",
    "  - `Embarked`: En sık kullanılan liman ile doldurun.\n",
    "- **Fonksiyon**: `fill_missing_values(df)`\n",
    "  - **Parametre**: DataFrame\n",
    "  - **Çıktı**: Eksik verileri doldurulmuş DataFrame\n",
    "  - **Not**: Orijinal DataFrame’i değiştirmemek için kopyasını döndürün.\n",
    "\n",
    "### 3. Sex Sütununu Düşürme\n",
    "- **Görev**: `Sex` sütununu veri setinden kaldırın.\n",
    "- **Fonksiyon**: `drop_sex_column(df)`\n",
    "  - **Parametre**: DataFrame\n",
    "  - **Çıktı**: `Sex` sütunu kaldırılmış DataFrame\n",
    "  - **Not**: Orijinal DataFrame’i değiştirmemek için kopyasını döndürün.\n",
    "\n",
    "### 4. Unvan Çıkarımı (Title Extraction)\n",
    "- **Görev**: `Name` sütunundan unvanları (`Mr`, `Mrs`, `Miss`, `Master` vb.) çıkarın ve yeni bir `Title` sütunu oluşturun.\n",
    "- **Fonksiyon**: `extract_title(df)`\n",
    "  - **Parametre**: DataFrame\n",
    "  - **Çıktı**: `Title` sütunu eklenmiş DataFrame\n",
    "  - **Not**: Unvanları düzenli ifadeler (regex) kullanarak çıkarın. Örneğin, \"Mr.\" veya \"Mrs.\" gibi ifadeleri arayın.\n",
    "\n",
    "### 5. Cinsiyet Tahmini\n",
    "- **Görev**: `Title` sütununa dayalı olarak cinsiyet tahmini yapın ve yeni bir `EstimatedSex` sütunu oluşturun.\n",
    "  - Örneğin: `Mr`, `Master` → `male`; `Mrs`, `Miss` → `female`; diğer unvanlar için en yaygın cinsiyeti kullanın.\n",
    "- **Fonksiyon**: `estimate_sex_from_title(df)`\n",
    "  - **Parametre**: DataFrame\n",
    "  - **Çıktı**: `EstimatedSex` sütunu eklenmiş DataFrame\n",
    "  - **Not**: Orijinal DataFrame’i değiştirmemek için kopyasını döndürün.\n",
    "\n",
    "### 6. Yeni Özellik Oluşturma\n",
    "- **Görev**: Aşağıdaki yeni özellikleri oluşturun:\n",
    "  - `FamilySize`: `SibSp` + `Parch` + 1 (kendi dahil)\n",
    "  - `IsAlone`: `FamilySize` 1 ise 1, değilse 0\n",
    "  - `AgeGroup`: Yaşı kategorilere ayırın (örneğin, 0-12: Çocuk, 13-19: Genç, 20-59: Yetişkin, 60+: Yaşlı)\n",
    "- **Fonksiyon**: `create_new_features(df)`\n",
    "  - **Parametre**: DataFrame\n",
    "  - **Çıktı**: Yeni özellikler eklenmiş DataFrame\n",
    "  - **Not**: Orijinal DataFrame’i değiştirmemek için kopyasını döndürün.\n",
    "\n",
    "### 7. Tüm İşlemleri Birleştirme\n",
    "- **Görev**: Yukarıdaki tüm işlemleri sırayla uygulayan bir ana fonksiyon yazın.\n",
    "- **Fonksiyon**: `process_titanic_data(file_path)`\n",
    "  - **Parametre**: `file_path`\n",
    "  - **Çıktı**: İşlenmiş DataFrame\n",
    "  - **Not**: Tüm fonksiyonları sırayla çağırarak veri setini tamamen işleyin."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e55d8523",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T16:19:39.626164Z",
     "iopub.status.busy": "2025-07-18T16:19:39.625553Z",
     "iopub.status.idle": "2025-07-18T16:19:41.115752Z",
     "shell.execute_reply": "2025-07-18T16:19:41.115154Z"
    },
    "id": "17166f77",
    "papermill": {
     "duration": 1.494483,
     "end_time": "2025-07-18T16:19:41.117071",
     "exception": false,
     "start_time": "2025-07-18T16:19:39.622588",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from pathlib import Path #Bu kütüphane dosya kontrolü için oluşturulmuş.\n",
    "import pandas as pd\n",
    "def load_data(file_path:str):\n",
    "    path = Path(file_path)\n",
    "    \"\"\"\n",
    "    if(file_path.exists() == True):\n",
    "        df = pd.read_csv(file_path)\n",
    "        return df\n",
    "    else:\n",
    "        print(\"Dosya yolu bozuk yeniden dene!\")\n",
    "        return None  \n",
    "    \"\"\"\n",
    "\n",
    "    if path.exists():\n",
    "        df = pd.read_csv(path)\n",
    "        return df\n",
    "    else:\n",
    "        print(\"Dosya yolu bozuk\")\n",
    "        return None\n",
    "    \"\"\"\n",
    "    Titanic veri setini yükler.\n",
    "    Parametre: file_path (str) - Veri setinin dosya yolu\n",
    "    Çıktı: Pandas DataFrame\n",
    "    \"\"\"\n",
    "    # TODO: Dosya varlığını kontrol et ve DataFrame döndür"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b3d6e570",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T16:19:41.122342Z",
     "iopub.status.busy": "2025-07-18T16:19:41.122072Z",
     "iopub.status.idle": "2025-07-18T16:19:41.169662Z",
     "shell.execute_reply": "2025-07-18T16:19:41.168746Z"
    },
    "papermill": {
     "duration": 0.051421,
     "end_time": "2025-07-18T16:19:41.170839",
     "exception": false,
     "start_time": "2025-07-18T16:19:41.119418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                             Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin Embarked  \n",
       "0        0         A/5 21171   7.2500   NaN        S  \n",
       "1        0          PC 17599  71.2833   C85        C  \n",
       "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3        0            113803  53.1000  C123        S  \n",
       "4        0            373450   8.0500   NaN        S  \n",
       "..     ...               ...      ...   ...      ...  \n",
       "886      0            211536  13.0000   NaN        S  \n",
       "887      0            112053  30.0000   B42        S  \n",
       "888      2        W./C. 6607  23.4500   NaN        S  \n",
       "889      0            111369  30.0000  C148        C  \n",
       "890      0            370376   7.7500   NaN        Q  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "load_data('/kaggle/input/titanic/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bb4689aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T16:19:41.177297Z",
     "iopub.status.busy": "2025-07-18T16:19:41.176705Z",
     "iopub.status.idle": "2025-07-18T16:19:41.181016Z",
     "shell.execute_reply": "2025-07-18T16:19:41.180414Z"
    },
    "id": "a56c1307",
    "papermill": {
     "duration": 0.008434,
     "end_time": "2025-07-18T16:19:41.182018",
     "exception": false,
     "start_time": "2025-07-18T16:19:41.173584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 2. Eksik Verileri Doldurma\n",
    "def fill_missing_values(df):\n",
    "    \"\"\"\n",
    "    Age ve Embarked sütunlarındaki eksik verileri doldurur.\n",
    "    Parametre: df (DataFrame)\n",
    "    Çıktı: Eksik verileri doldurulmuş DataFrame\n",
    "    \"\"\"\n",
    "    df_copy = df.copy()\n",
    "    # TODO: Age için ortalama, Embarked için en sık değer ile doldur\n",
    "\n",
    "    df_copy[\"Age\"].fillna(df['Age'].mean(),inplace= True)\n",
    "    df_copy[\"Embarked\"].fillna(df['Embarked'].mode()[0],inplace= True)   \n",
    "    \n",
    "    return df_copy\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e75eb0d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T16:19:41.187863Z",
     "iopub.status.busy": "2025-07-18T16:19:41.187461Z",
     "iopub.status.idle": "2025-07-18T16:19:41.190798Z",
     "shell.execute_reply": "2025-07-18T16:19:41.190284Z"
    },
    "id": "8017a4c3",
    "papermill": {
     "duration": 0.00723,
     "end_time": "2025-07-18T16:19:41.191807",
     "exception": false,
     "start_time": "2025-07-18T16:19:41.184577",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 3. Sex Sütununu Düşürme\n",
    "def drop_sex_column(df):\n",
    "    \"\"\"\n",
    "    Sex sütununu düşürür.\n",
    "    Parametre: df (DataFrame)\n",
    "    Çıktı: Sex sütunu kaldırılmış DataFrame\n",
    "    \"\"\"\n",
    "    df_copy = df.copy()\n",
    "    # TODO: Sex sütununu kaldır\n",
    "\n",
    "    df_copy.drop('Sex',axis=1,inplace=True)\n",
    "    \n",
    "    return df_copy\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "64bb45f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T16:19:41.197408Z",
     "iopub.status.busy": "2025-07-18T16:19:41.197008Z",
     "iopub.status.idle": "2025-07-18T16:19:41.200255Z",
     "shell.execute_reply": "2025-07-18T16:19:41.199769Z"
    },
    "id": "dc163100",
    "papermill": {
     "duration": 0.007027,
     "end_time": "2025-07-18T16:19:41.201253",
     "exception": false,
     "start_time": "2025-07-18T16:19:41.194226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 4. Unvan Çıkarımı\n",
    "def extract_title(df):\n",
    "    \"\"\"\n",
    "    Name sütunundan unvanları çıkarır ve Title sütunu ekler.\n",
    "    Parametre: df (DataFrame)\n",
    "    Çıktı: Title sütunu eklenmiş DataFrame\n",
    "    \"\"\"\n",
    "    df_copy = df.copy()\n",
    "    # TODO: Regex ile unvanları çıkar ve Title sütunu ekle\n",
    "    df_copy['Title'] = df[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n",
    "    return df_copy\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "270c7fea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T16:19:41.207031Z",
     "iopub.status.busy": "2025-07-18T16:19:41.206551Z",
     "iopub.status.idle": "2025-07-18T16:19:41.210332Z",
     "shell.execute_reply": "2025-07-18T16:19:41.209819Z"
    },
    "id": "f3181a0f",
    "papermill": {
     "duration": 0.007683,
     "end_time": "2025-07-18T16:19:41.211301",
     "exception": false,
     "start_time": "2025-07-18T16:19:41.203618",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 5. Cinsiyet Tahmini\n",
    "def estimate_sex_from_title(df):\n",
    "    \"\"\"\n",
    "    Title sütununa göre cinsiyet tahmini yapar ve EstimatedSex sütunu ekler.\n",
    "    Parametre: df (DataFrame)\n",
    "    Çıktı: EstimatedSex sütunu eklenmiş DataFrame\n",
    "    \"\"\"\n",
    "    df_copy = df.copy()\n",
    "    # TODO: Title'a göre cinsiyet tahmini yap ve EstimatedSex sütunu ekle\n",
    "    df_copy[\"EstimatedSex\"] = df[\"Title\"].replace([\"Mlle\", \"Ms\", \"Mme\", \"Mrs\"], \"Miss\")\n",
    "    df_copy[\"EstimatedSex\"] = df[\"Title\"].replace([\"Dr\", \"Rev\", \"Major\", \"Col\", \"Don\", \"Sir\", \"Capt\", \"Jonkheer\", \"Lady\", \"Countess\"], \"Rare\")\n",
    "    return df_copy\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ba1c9f89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T16:19:41.217075Z",
     "iopub.status.busy": "2025-07-18T16:19:41.216680Z",
     "iopub.status.idle": "2025-07-18T16:19:41.220746Z",
     "shell.execute_reply": "2025-07-18T16:19:41.220227Z"
    },
    "id": "c00b5f4f",
    "papermill": {
     "duration": 0.008143,
     "end_time": "2025-07-18T16:19:41.221876",
     "exception": false,
     "start_time": "2025-07-18T16:19:41.213733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 6. Yeni Özellik Oluşturma\n",
    "def create_new_features(df):\n",
    "    \n",
    "    \"\"\"\n",
    "    FamilySize, IsAlone ve AgeGroup özelliklerini oluşturur.\n",
    "    Parametre: df (DataFrame)\n",
    "    Çıktı: Yeni özellikler eklenmiş DataFrame\n",
    "    \"\"\"\n",
    "    df_copy = df.copy()\n",
    "    df_copy['FamilySize'] = df_copy['SibSp']+ df_copy['Parch'] +1\n",
    "    df_copy['IsAlone'] = df_copy['FamilySize'].apply(lambda x: 1 if x == 1 else 0) \n",
    "    df_copy[\"AgeGroup\"] = pd.cut(df_copy[\"Age\"], bins=[0, 12, 20, 60, 100], labels=[\"Çocuk\", \"Genç\", \"Yetişkin\", \"Yaşlı\"])\n",
    "    # TODO: FamilySize, IsAlone ve AgeGroup özelliklerini ekle\n",
    "    return df_copy\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b359d944",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-18T16:19:41.227210Z",
     "iopub.status.busy": "2025-07-18T16:19:41.226820Z",
     "iopub.status.idle": "2025-07-18T16:19:41.230162Z",
     "shell.execute_reply": "2025-07-18T16:19:41.229703Z"
    },
    "id": "9842f6b9",
    "papermill": {
     "duration": 0.006934,
     "end_time": "2025-07-18T16:19:41.231092",
     "exception": false,
     "start_time": "2025-07-18T16:19:41.224158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 7. Tüm İşlemleri Birleştirme\n",
    "def process_titanic_data(file_path):\n",
    "    \"\"\"\n",
    "    Tüm özellik mühendisliği adımlarını sırayla uygular.\n",
    "    Parametre: file_path (str) - Veri setinin dosya yolu\n",
    "    Çıktı: İşlenmiş DataFrame\n",
    "    \n",
    "\"\"\"\n",
    "    \n",
    "    # TODO: Yukarıdaki fonksiyonları sırayla çağır\n",
    "    df =load_data(file_path)\n",
    "    df=fill_missing_values(df)\n",
    "    df=drop_sex_column(df)\n",
    "    df=extract_title(df)\n",
    "    df=estimate_sex_from_title(df)\n",
    "    df=create_new_features(df)\n",
    "\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4004a862",
   "metadata": {
    "id": "c2e8d5ae",
    "papermill": {
     "duration": 0.002173,
     "end_time": "2025-07-18T16:19:41.235481",
     "exception": false,
     "start_time": "2025-07-18T16:19:41.233308",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Pipeline süreçleri oluşturun ve ColumnsTransformer kullanın.\n",
    "\n",
    "- Kendi Fonksiyonlarınızı Pipeline ile kulanmaya çalışın.\n",
    "- Fonksiyonlarınızı yazarken, her zaman DataFrame’in bir kopyasını döndürerek orijinal veriyi korumaya özen gösterin.\n",
    "- `EstimatedSex` için unvanların cinsiyetle ilişkisini belirlerken, yaygın unvanlar (`Mr`, `Mrs`, `Miss`, `Master`) için sabit kurallar kullanabilirsiniz. Nadir unvanlar için varsayılan bir cinsiyet atayabilirsiniz (örneğin, `male`).\n",
    "\n",
    "\n",
    "Başarılar!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75c88e75",
   "metadata": {
    "id": "7d253708",
    "papermill": {
     "duration": 0.00214,
     "end_time": "2025-07-18T16:19:41.239830",
     "exception": false,
     "start_time": "2025-07-18T16:19:41.237690",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.319709,
   "end_time": "2025-07-18T16:19:41.558751",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-18T16:19:35.239042",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
